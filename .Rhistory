ur.sel= ur.sel/ n.sel
ur.c.val= ur.c.val/ n.sel
#set P-value to 1 (since original data should be treated as 1 permutation):
p.sel=1
p.c.val=1
all.corr=matrix(NA, nrow=nperm, ncol=2)
all.corr[1,1]=ur.sel
all.corr[1,2]=ur.c.val
if (length(gr)==ncf.levels){
for (k in 1:(nperm-1)){
#randomize subjects' assignments to groups:
r.gr=sample(gr,length(gr), replace=F)
for (i in 1:length(subject)){
test_fac[contr_fac==subject[i]]=r.gr[i]
}
#make random selection or same number of cases per subject
sel=rep(NA,nrow(xdata))#create var. for the random selection to be indicated
for (i in 1:ncf.levels){
sel[contr_fac==subject[i]] =sample(c(rep(1, n.to.sel), rep(0,f.table[i,2]-n.to.sel)), f.table[i,2],replace=F)
}
sel.index= number[sel==1]
#do a DFA and store results in 'res':
res=eval(parse(text=model))
#get predictions and store them in 'pred':
pred=predict(res,xdata,prior=pr_prob)$class
ran.sel= sum((test_fac==pred)[sel==1])
ran.c.val= sum((test_fac==pred)[sel==0])
if (ran.sel>=ur.sel){p.sel = p.sel + 1}
if (ran.c.val>= ur.c.val){p.c.val= p.c.val + 1}
all.corr[k+1,1]=ran.sel
all.corr[k+1,2]=ran.c.val
}
what=c("N correctly assigned, original, selected", "P for selected", "N correctly assigned, original, cross-validated", "P for cross-validated", "N groups (levels of test factor)", "N subjects (levels of control factor)", "N cases total", "N cases selected per subject","N selected total", "N permutations","N random selections")
value=c(ur.sel,p.sel/nperm,ur.c.val,p.c.val/nperm,ntf.levels,ncf.levels,nrow(xdata),n.to.sel,n.to.sel*ncf.levels,nperm,n.sel)
result=data.frame(what,value)
}else{
result="at least one subject is member of two groups; no test done"
}
result
write.table(result,file=paste(JuliaPath,"tole3_lp2.txt"),sep="\t",row.names=F,col.names=T)
readRDS("/Users/jkvrtilek/Desktop/OSU/PhD/Calls/selectionTables2021-10-01.RDS")
library(diffr)
diffr("/Users/jkvrtilek/Downloads/spectro_analysis.R","/Users/jkvrtilek/Downloads/spectro_analysis_testing.R")
knitr::opts_chunk$set(echo = TRUE)
# load packages
library(tidyverse)
library(warbleR)
library(soundgen)
# read in data
JuliaPaths <- c("/Users/jkvrtilek/Desktop/OSU/PhD/Calls/selectionTables2022-03-21.RDS", "/Volumes/call_drive2")
GerryPaths <- ""
GracePaths <- ""
selAll <- readRDS(JuliaPaths[1])
# add columns for bat, date, year, month, and day
selAll <- selAll %>%
separate(col = sound.files, into = c("date", "bat", NA), sep = "_", remove = FALSE) %>%
separate(col = date, into = c("year", "month", "day"), sep = "-", remove = FALSE)
knitr::opts_chunk$set(echo = TRUE)
# load packages
library(tidyverse)
library(warbleR)
library(soundgen)
# read in data
JuliaPaths <- c("/Users/jkvrtilek/Desktop/OSU/PhD/Calls/selectionTables2022-03-21.RDS", "/Volumes/call_drive2")
GerryPaths <- ""
GracePaths <- ""
selAll <- readRDS(JuliaPaths[1])
# add columns for bat, date, year, month, and day
selAll <- selAll %>%
separate(col = sound.files, into = c("date", "bat", NA), sep = "_", remove = FALSE) %>%
separate(col = date, into = c("year", "month", "day"), sep = "-", remove = FALSE)
# read in list of file paths
metadata <- read_csv("/Users/jkvrtilek/Desktop/OSU/PhD/Calls/Selection/whole_recordings_renamed_metadata.csv")
# add file paths to selection table
selAll <- selAll %>%
left_join(metadata, by = c("sound.files" = "new_sound_file_nm")) %>%
select(c(1:11,18:21))
# change file paths for appropriate computer
selAll$new_sound_file_dir <- str_replace(selAll$new_sound_file_dir, "D:", JuliaPaths[2])
selNA <- selAll %>%
filter(is.na(selection_length))
selNoNA <- selAll %>%
filter(!is.na(selection_length))
rowsperfile <- unique(selNA$sound.files)
print(paste("There are", length(rowsperfile), "WAVs with missing data."))
if(nrow(selNA) == length(rowsperfile)) {
print("There is only one 'missing' selection for each WAV file that is missing data.")
} else {
print("Check on me!")
}
missingFiles <- unique(selNA$sound.files)
selWithMissing <- selAll %>%
filter(sound.files %in% missingFiles)
if(nrow(selNA) == nrow(selWithMissing)) {
print("They do not! Hooray!")
} else {
print("Check on me!")
}
sel2019 <- selAll %>%
filter(year == 2019)
selNA %>%
group_by(date.x) %>%
summarize(count = n())
sel2019 %>%
group_by(date.x) %>%
summarize(count = n())
View(selAll)
# make histogram to see where to place cutoff between echolocation and contact calls
selCutoff <- selAll %>%
filter(selection_length >= .001) %>%
filter(selection_length <= .005)
hist(selCutoff$selection_length, breaks = 1000)
selByBat <- selAll %>%
group_by(bat) %>%
summarize(count = n()) %>%
arrange(count)
print(paste("We tried to record", nrow(selByBat), "different bats."))
print(paste("We have recordings from", nrow(selByBat), "different bats."))
print(paste("The bat with the fewest calls is", selByBat$bat[1], ", who called", selByBat$count[1], "times."))
print(paste("The bat with the most calls is", selByBat$bat[nrow(selByBat)], ", who called", selByBat$count[nrow(selByBat)], "times."))
selByDate <- selAll %>%
group_by(bat, date.x) %>%
summarise(count = n()) %>%
arrange(count)
print(paste("There are", nrow(selByDate), "total recording sessions."))
print(paste("The bat with the fewest calls in a day is", selByDate$bat[1], ", who called", selByDate$count[1], "times."))
print(paste("The bat with the most calls in a day is", selByDate$bat[nrow(selByDate)], ", who called", selByDate$count[nrow(selByDate)], "times."))
selAll %>%
filter(start < 1) %>%
mutate(year = substr(date, 1, 4)) %>%
ggplot(aes(x = start)) +
facet_wrap(~ year, scales = "free_y", ncol = 1) +
geom_histogram()
View(selAll)
selAll %>%
filter(start < 1) %>%
ggplot(aes(x = start)) +
facet_wrap(~ year, scales = "free_y", ncol = 1) +
geom_histogram()
# Julia Vrtilek
# March 2022
# script to clean spectro_analysis output
# load packages
library(tidyverse)
# set file paths
JuliaPath <- "/Users/jkvrtilek/Desktop/OSU/PhD/Calls/"
GerryPath <- ""
# read in data
d <- readRDS(paste(JuliaPath, "giantspecan.RDS", sep = ""))
# convert duration to milliseconds
d$duration <- d$duration*1000
# make histograms of all measures
for (col in 3:ncol(d)) {
hist(d[,col], main = colnames(d[col]))
}
# count impossible measures
range(d$duration)
tooshort <- sum(d$duration < 3)
toolong <- sum(d$duration > 50)
range(d$peakf)
toolow <- sum(d$peakf < 10)
toohigh <- sum(d$peakf > 40)
# filter out impossible data
d2 <- d %>%
filter(duration > 3) %>%
filter(duration < 50) %>%
filter(peakf > 10) %>%
filter(peakf < 40)
# lots of overlap in the impossible data... that's good, right?
# make histograms of all measures
for (col in 3:ncol(d2)) {
hist(d2[,col], main = colnames(d2[col]))
}
d <- readRDS("/Users/jkvrtilek/Desktop/OSU/PhD/Calls/DFA_loadings.RDS")
View(d)
readRDS("/Users/jkvrtilek/Desktop/OSU/PhD/Calls/DFA_loadings_goodbadmeh.RDS")
# make histograms of all measures
for (col in 3:ncol(d2)) {
hist(log(d2[,col]+1), main = colnames(d2[col]))
}
x <- readRDS("/Users/jkvrtilek/Downloads/count_upload.RDS")
setwd("/Users/jkvrtilek/Downloads")
readRDS(count_upload.RDS)
getwd()
readRDS("count_upload.RDS")
# clear workspace
rm(list=ls())
# load packages
library(tidyverse)
# set working directory
setwd("/Users/jkvrtilek/Desktop/OSU/PhD/GitHub/call-convergence/social_data/2010-2014_foodsharing")
# get data from University of Maryland (UMD) colony (from unpublished oxytocin pilot study)
umd <-
read.csv("2013_oxytocin_social_data.csv") %>%
mutate(subject= paste0("bat",subject)) %>%
mutate(donor= paste0("bat",donor)) %>%
# numbers are count of minutes that have at least 5 sec of behavior (multiplying by 60 will overestimate actual seconds)
# convert minutes to seconds assuming 40 s of sharing per minute with at least 5 s of food sharing
# this adjustment creates matching food transfer rates based on all other data (see linear model below)
mutate(grooming = (grooming*40), sharing = (sharing*40)) %>%
as_tibble()
# check that sharing per trial causes mass gain to a degree that matches past work
t <-
umd %>%
group_by(trial) %>%
summarize(mass.gain= mean(trial.mass.gain.subject, na.rm=T), sharing= sum(sharing, na.rm=T)) %>%
mutate(sharing.min= sharing/60, mass.gain.mg= mass.gain*1000)
# plot looks similar to other work (see Figure S1 in Carter & Wilkinson 2015 Proc B)
t %>%
ggplot(aes(x=sharing, y=mass.gain))+
geom_point(size=2)+
geom_smooth(method= "lm")+
xlab("mouthlicking (seconds)")+
ylab("weight gain (grams)")
library(diffr)
diffr("/Users/jkvrtilek/Desktop/OSU/PhD/GitHub/call-convergence/social_data/2010-2014_foodsharing/compile_2014_foodsharing_data03.R","/Users/jkvrtilek/Downloads/compile_2014_foodsharing_data06.R")
# clear workspace
rm(list=ls())
# load packages
library(tidyverse)
# set working directory
setwd("/Users/jkvrtilek/Desktop/OSU/PhD/GitHub/call-convergence/social_data/2010-2014_foodsharing")
# get data from University of Maryland (UMD) colony (from unpublished oxytocin pilot study)
umd <-
read.csv("2013_oxytocin_social_data.csv") %>%
mutate(subject= paste0("bat",subject)) %>%
mutate(donor= paste0("bat",donor)) %>%
# numbers are count of minutes that have at least 5 sec of behavior (multiplying by 60 will overestimate actual seconds)
# convert minutes to seconds assuming 40 s of sharing per minute with at least 5 s of food sharing
# this adjustment creates matching food transfer rates based on all other data (see linear model below)
mutate(grooming = (grooming*40), sharing = (sharing*40)) %>%
as_tibble()
# check that sharing per trial causes mass gain to a degree that matches past work
t <-
umd %>%
group_by(trial) %>%
summarize(mass.gain= mean(trial.mass.gain.subject, na.rm=T), sharing= sum(sharing, na.rm=T)) %>%
mutate(sharing.min= sharing/60, mass.gain.mg= mass.gain*1000)
# plot looks similar to other work (see Figure S1 in Carter & Wilkinson 2015 Proc B)
t %>%
ggplot(aes(x=sharing, y=mass.gain))+
geom_point(size=2)+
geom_smooth(method= "lm")+
xlab("mouthlicking (seconds)")+
ylab("weight gain (grams)")
# expected value from my other PhD data (121 fasting trials) is that 37 milligrams of food [95% CI: 31â€“43 mg] should be transferred per minute of mouth licking
lm(mass.gain.mg~sharing.min, data=t)
# get data from Michigan colony
# food sharing events
d <- read.csv("vamp_donations19.csv")
# possible donors for each trial
pos.d <- read.csv("vamp_possible donors3.csv")
# kinship estimates using two methods (with and without pedigree info)
kinship <- read.csv("vamp_relatedness12.csv") %>%
mutate(dyad = paste(bat1, bat2))
# bat sexes and ages
bats <- read.csv("vamp_sex_age.csv")
# check all receivers and donors are in bats dataframe (df)
unique(d$receiver)[which(!unique(d$receiver) %in% bats$name)]
unique(d$donor)[which(!unique(d$donor) %in% bats$name)]
# fix bat names
d$donor[which(d$donor== "leord")] <- "leonard"
d$donor[which(d$donor== "")] <- NA
# check which bats are not in Michigan donation data
tbats <- unique(c(d$receiver, d$donor))
bats$name[which(!bats$name %in% tbats)]
# get names in possible donors that don't match bat names
pd <- unique(as.vector(as.matrix(pos.d)))
pd[which(!pd %in% bats$name)]
# change these names in possible donors matrix
pos.d2 <- pos.d %>%
mutate(across(everything(), ~ str_replace(string = .x, pattern = "two", replacement = "bat2"))) %>%
mutate(across(everything(), ~ str_replace(string = .x, pattern = "three", replacement = "bat3"))) %>%
mutate(across(everything(), ~ str_replace(string = .x, pattern = "four", replacement = "bat4")))
# update possible donors
pd <- unique(as.vector(as.matrix(pos.d2)))
bats$name[which(!bats$name %in% pd)]
# to get actual and possible donations...
# first get all combinations of donors and trials
t <-
expand_grid(trial_receiver= unique(paste(d$trial, d$receiver)), donor= unique(bats$name), duration= 0) %>%
separate(trial_receiver, into= c("trial", "receiver")) %>%
filter(donor!=receiver)
# then delete impossible cases of food sharing
for (i in 1:length(pos.d2)) {
# get current trial
focal.trial <- i
# get possible donors for current trial (bats present during trial)
pos <- pos.d2[,focal.trial]
# get the possible receiver (fasted bat) for current trial
pos2 <-
d %>%
filter(trial== focal.trial) %>%
pull(receiver) %>%
unique()
# put NA duration for trials where donor is not a possible donor or receiver is not possible receiver
t$duration[which(t$trial == focal.trial & !(t$donor %in% pos))] <- NA
t$duration[which(t$trial == focal.trial & !(t$receiver %in% pos2))] <- NA
# show progress
print(paste(i,"of",length(pos.d2)))
}
# label observed cases of food sharing
d$trial.donor.receiver <- paste0(d$trial, d$donor, d$receiver)
# get actual and possible donations
d2 <-
t %>%
# discard impossible donations
filter(duration==0) %>%
# add observed cases of food sharing
mutate(trial.donor.receiver= paste0(trial,donor,receiver)) %>%
mutate(donation.sec = d$duration[match(.$trial.donor.receiver, d$trial.donor.receiver)]) %>%
mutate(donation.sec= ifelse(is.na(donation.sec), 0, donation.sec)) %>%
# add trial duration (observation time) in seconds
mutate(observation.sec = 60*60*d$trial.duration..h.[match(.$trial, d$trial)]) %>%
# add trial dates
mutate(date = d$date[match(.$trial, d$trial)]) %>%
select(date, trial, donor, receiver, donation.sec, observation.sec)
# get dyadic food sharing rates from Michigan colony
d3 <-
d2 %>%
group_by(donor, receiver) %>%
summarize(donation.sec= sum(donation.sec), possible.sec= sum(observation.sec), .groups= 'drop')
# get dyadic food sharing rates from UMD colony
umd2 <-
umd %>%
mutate(receiver= subject) %>%
mutate(possible.sec= 60*60) %>%
group_by(donor, receiver) %>%
summarize(
possible.sec= sum(possible.sec, na.rm=T),
donation.sec = sum(sharing, na.rm=T),
.groups = 'drop')
# combine and add other dyadic variables
d4 <-
d3 %>%
full_join(umd2) %>%
group_by(donor, receiver) %>%
summarize(
possible.sec= sum(possible.sec, na.rm=T),
donation.sec = sum(donation.sec, na.rm=T),
.groups = 'drop') %>%
mutate(dyad= paste(donor,receiver)) %>%
# add kinship
mutate(kinship= kinship$pedigree.m19[match(.$dyad, kinship$dyad)]) %>%
# add donor sex
mutate(donor.sex= bats$sex[match(.$donor, bats$name)]) %>%
# add receiver sex
mutate(receiver.sex= bats$sex[match(.$receiver, bats$name)]) %>%
# add donor age
mutate(donor.age.2014.10.07= bats$age20141007[match(.$donor, bats$name)]) %>%
# add receiver age
mutate(receiver.age.2014.10.07= bats$age20141007[match(.$receiver, bats$name)]) %>%
# donation rate
mutate(donation.rate= donation.sec/possible.sec) %>%
select(-dyad)
# save food-sharing rates data
write.csv(d4, "food_sharing_rates_2010-2014.csv")
# set working directory
setwd("/Users/jkvrtilek/Desktop/OSU/PhD/GitHub/call-convergence/")
# load packages
library(tidyverse)
library(gdata)
# load kinship data
kin_raw <- read_csv("social_data/kinship-all-bats.csv") %>%
mutate(dir.dyad = paste(bat1,bat2,sep="_")) %>%
mutate(kin.r = kinship) %>%
select(dir.dyad,bat1,bat2,kin.r,5:8)
# change kinship for bats from same site (Tole) in diff seasons from 0 to NA
temp <- kin_raw %>%
filter(site1==site2) %>%
filter(season1!=season2)
kin <- kin_raw %>%
mutate(kinship = case_when(dir.dyad %in% temp$dir.dyad ~ NA,
!(dir.dyad %in% temp$dir.dyad) ~ kin.r)) %>%
select(dir.dyad, kinship, site1:season2)
# load phd data
rates15 <- read.csv("social_data/2010-2014_foodsharing/food_sharing_rates_2010-2014.csv") %>%
mutate(dir.dyad = paste(donor,receiver,sep="_")) %>%
mutate(grooming = NA) %>%
mutate(foodsharing = donation.rate) %>%
mutate(actor.sex = toupper(actor.sex)) %>%
mutate(receiver.sex = toupper(receiver.sex)) %>%
select(dir.dyad,foodsharing,grooming,actor.sex,receiver.sex)
rates15 <- read.csv("social_data/2010-2014_foodsharing/food_sharing_rates_2010-2014.csv")
View(rates15)
# load phd data
rates15 <- read.csv("social_data/2010-2014_foodsharing/food_sharing_rates_2010-2014.csv") %>%
mutate(dir.dyad = paste(donor,receiver,sep="_")) %>%
mutate(grooming = NA) %>%
mutate(foodsharing = donation.rate) %>%
mutate(donor.sex = toupper(actor.sex)) %>%
mutate(receiver.sex = toupper(receiver.sex)) %>%
select(dir.dyad,foodsharing,grooming,actor.sex,receiver.sex)
# load phd data
rates15 <- read.csv("social_data/2010-2014_foodsharing/food_sharing_rates_2010-2014.csv") %>%
mutate(dir.dyad = paste(donor,receiver,sep="_")) %>%
mutate(grooming = NA) %>%
mutate(foodsharing = donation.rate) %>%
mutate(donor.sex = toupper(donor.sex)) %>%
mutate(receiver.sex = toupper(receiver.sex)) %>%
select(dir.dyad,foodsharing,grooming,actor.sex,receiver.sex)
# load phd data
rates15 <- read.csv("social_data/2010-2014_foodsharing/food_sharing_rates_2010-2014.csv") %>%
mutate(dir.dyad = paste(donor,receiver,sep="_")) %>%
mutate(grooming = NA) %>%
mutate(foodsharing = donation.rate) %>%
mutate(actor.sex = toupper(donor.sex)) %>%
mutate(receiver.sex = toupper(receiver.sex)) %>%
select(dir.dyad,foodsharing,grooming,actor.sex,receiver.sex)
View(rates15)
View(rates15)
# combine data from 2015, 2017, 2019, and call distance to make a dataframe
# columns: Directed dyad, Vocal distance, Kinship, Allogrooming, Foodsharing, Capture population bat 1, Capture population bat 2, Sex 1, Sex 2
# Julia Vrtilek
# 29 March 2024, updated 10 April 2024, 10 May 2024
# set working directory
setwd("/Users/jkvrtilek/Desktop/OSU/PhD/GitHub/call-convergence/")
# load packages
library(tidyverse)
library(gdata)
# load kinship data
kin_raw <- read_csv("social_data/kinship-all-bats.csv") %>%
mutate(dir.dyad = paste(bat1,bat2,sep="_")) %>%
mutate(kin.r = kinship) %>%
select(dir.dyad,bat1,bat2,kin.r,5:8)
# change kinship for bats from same site (Tole) in diff seasons from 0 to NA
temp <- kin_raw %>%
filter(site1==site2) %>%
filter(season1!=season2)
kin <- kin_raw %>%
mutate(kinship = case_when(dir.dyad %in% temp$dir.dyad ~ NA,
!(dir.dyad %in% temp$dir.dyad) ~ kin.r)) %>%
select(dir.dyad, kinship, site1:season2)
# load phd data
rates15 <- read.csv("social_data/2010-2014_foodsharing/food_sharing_rates_2010-2014.csv") %>%
mutate(dir.dyad = paste(donor,receiver,sep="_")) %>%
mutate(grooming = NA) %>%
mutate(foodsharing = donation.rate) %>%
mutate(actor.sex = toupper(donor.sex)) %>%
mutate(receiver.sex = toupper(receiver.sex)) %>%
select(dir.dyad,foodsharing,grooming,actor.sex,receiver.sex)
# load and combine postdoc data
food17 <- read.csv("social_data/2016-2017_relationship_formation/vamp_dyadic_foodsharing_rates_2016-2017.csv") %>%
mutate(actor = case_when(actor == "son.of.ola" ~ "son-of-ola",
actor == "no.band" ~ "no-band",
.default = actor)) %>%
mutate(receiver = case_when(receiver == "son.of.ola" ~ "son-of-ola",
receiver == "no.band" ~ "no-band",
.default = receiver)) %>%
mutate(dir.dyad = paste(actor,receiver,sep="_")) %>%
mutate(foodsharing = donation.rate) %>%
select(dir.dyad,foodsharing)
groom17 <- read.csv("social_data/2016-2017_relationship_formation/vamp_dyadic_grooming_rates_2016-2017.csv") %>%
mutate(actor = case_when(actor == "son.of.ola" ~ "son-of-ola",
actor == "no.band" ~ "no-band",
.default = actor)) %>%
mutate(receiver = case_when(receiver == "son.of.ola" ~ "son-of-ola",
receiver == "no.band" ~ "no-band",
.default = receiver)) %>%
mutate(dir.dyad = paste(actor,receiver,sep="_")) %>%
mutate(grooming = grooming.rate) %>%
select(dir.dyad,grooming,actor.sex,receiver.sex)
rates17 <- left_join(food17,groom17,by="dir.dyad")
# load lab data
rates19 <- read.csv("social_data/2019_grooming/2019_grooming_rates.csv") %>%
mutate(grooming = grooming.rate) %>%
mutate(foodsharing = NA) %>%
select(dir.dyad,grooming,foodsharing,actor.sex,receiver.sex)
# combine rates for left_join
all_rates <- rbind(rates15,rates17,rates19)
# load DFA distances
dist <- as.matrix(read_csv("vocal-distance-lda.csv"))
rownames(dist) <- colnames(dist)
distdf <- enframe(unmatrix(dist))
colnames(distdf) <- c("dir.dyad","dist")
distdf$dir.dyad <- gsub(":","_",distdf$dir.dyad)
# remove bat w/self
distdf2 <- distdf %>%
separate(dir.dyad, into = c("bat1","bat2"), sep = "_", remove = FALSE) %>%
filter(bat1 != bat2) %>%
select(-bat1,-bat2)
# make df with all extant data
d <- left_join(kin,all_rates,by = "dir.dyad")
d2 <- left_join(d,distdf2,by = "dir.dyad") %>%
filter(!is.na(dist))
d3 <- d2 %>%
separate(dir.dyad, into = c("actor","receiver"), sep = "_", remove = FALSE)
# fill in sexes
m <- c("vampison","black-panther","falcon","hulk","bat5","jenna-bat")
f <- c("bat6","bat7","lds","scc","six")
sex <- d3 %>%
select(actor, actor.sex) %>%
distinct() %>%
mutate(sex = case_when(actor %in% m ~ "M",
actor %in% f ~ "M",
.default = actor.sex)) %>%
select(actor, sex) %>%
filter(!is.na(sex))
female <- sex %>%
filter(sex == "F")
male <- sex %>%
filter(sex == "M")
d4 <- d3 %>%
mutate(a.sex = case_when(actor %in% female$actor ~ "F",
actor %in% male$actor ~ "M",
.default = NA)) %>%
mutate(r.sex = case_when(receiver %in% female$actor ~ "F",
receiver %in% male$actor ~ "M",
.default = NA)) %>%
select(dir.dyad:receiver, a.sex, r.sex, site1:season2, kinship, grooming, foodsharing, dist)
View(d4)
write.csv(d4,"vocal_social_data.csv")
